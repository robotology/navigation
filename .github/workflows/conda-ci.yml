name: C++ CI Workflow with conda dependencies

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

jobs:

  check-style:
    name: 'Check Style'
    runs-on: ubuntu-20.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v2

    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y perl

    - name: Check Style
      run: |
        perl tests/misc/check_style.pl

  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}@${{ matrix.ros_distro }}@conda]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        ros_distro: [humble]
        os: [ubuntu-latest, macos-latest, windows-2019]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2

    - uses: conda-incubator/setup-miniconda@v2
      with:
        mamba-version: "*"
        channels: conda-forge,defaults
        channel-priority: true

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Compilation related dependencies
        mamba install cmake compilers make ninja pkg-config
        # Actual dependencies
        mamba install -c conda-forge -c robostack-experimental -c robostack-humble ycm-cmake-modules eigen ace ros-${{ matrix.ros_distro }}-ros-base ros-${{ matrix.ros_distro }}-test-msgs


    - name: Download YARP [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      run: |
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp
      
    - name: Dependencies from source [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        cd yarp
        mkdir build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }}        
        cmake --install . --config ${{ matrix.build_type }}

    - name: Dependencies from source [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |  
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp
        cd yarp
        mkdir build
        cd build
        cmake -G"Visual Studio 16 2019" -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX}/Library -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
        cmake --build . --config ${{ matrix.build_type }}        
        cmake --install . --config ${{ matrix.build_type }}

    - name: Configure [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        # Python3_EXECUTABLE is set as a workaround for https://github.com/ros2/python_cmake_module/issues/6
        cmake -GNinja -DBUILD_TESTING:BOOL=ON \
              -DPython3_EXECUTABLE:PATH=$CONDA_PREFIX/bin/python3 -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=./install ..

    - name: Configure [Windows]
      if: contains(matrix.os, 'windows')
      # Command prompt is used as a workaround for https://github.com/RoboStack/ros-noetic/issues/21
      shell: cmd /C CALL {0}
      run: |
        mkdir -p build
        cd build
        cmake -G"Visual Studio 16 2019" -DBUILD_TESTING:BOOL=ON -DPython3_EXECUTABLE:PATH=%CONDA_PREFIX%\python.exe -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=.\install ..

    - name: Build [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Test [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}

    - name: Install [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --install . --config ${{ matrix.build_type }}
  
    - name: Build [Windows]
      if: contains(matrix.os, 'windows')
      shell: cmd /C CALL {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Test [Windows]
      if: contains(matrix.os, 'windows') 
      shell: cmd /C CALL {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}

    - name: Install [Windows]
      if: contains(matrix.os, 'windows')
      shell: cmd /C CALL {0}
      run: |
        cd build
        cmake --install . --config ${{ matrix.build_type }}
